import os
from datetime import  datetime
from typing import Optional, List
from controller.summary import get_meeting_shortcut, get_text_from_response
from controller.speach_to_text import get_entire_recording_transcript
from common.path_manager import PathManager
from reportlab.pdfgen.canvas import Canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from common import variables

class Report(Canvas):
    def __init__(self,
                 report_id: str,
                 report_name: Optional[str] = datetime.now().strftime('%d-%m-%Y %H_%M'),
                 header: Optional[str] = None,
                 transcript: tuple = None,
                 summary: Optional[str] = None,
                 screenshots: Optional[List[str]] = None,
                 **kwds):
        """

        :param report_name: Name of report
        :param transcript: Transcript of meeting
        :param summary: Summary generated by controller/summary. Optional, if not provided , one is being generated form transcript
        :param screenshots: List of file names in report id location. If not provided list is empty
        """

        variables.display.set('Tworzenie transkryptu...')
        self.transcript = transcript if transcript else get_entire_recording_transcript(report_id)

        print(self.transcript)

        self.paths = PathManager(report_id)
        variables.display.set('Tworzenie podsumowania...')
        #self.summary = get_text_from_response(get_meeting_shortcut(self.transcript)) if not summary else summary
        self.summary = ''

        self.header = header
        self.screenshots = screenshots if screenshots else []

        for font in os.listdir(self.paths.fonts):
            pdfmetrics.registerFont(TTFont(font.split('.')[0], str(self.paths.fonts / font)))


        super().__init__(str(self.paths.get_report_path() / f'{report_name}.pdf'), **kwds)
