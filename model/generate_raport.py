from datetime import  datetime
from typing import Optional, List
from controller.summary import get_meeting_shortcut, get_text_from_response
from common.path_manager import PathManager
from reportlab.pdfgen.canvas import Canvas
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.pdfbase import pdfmetrics
from reportlab.lib import colors


class Report(Canvas):
    def __init__(self,
                 report_id: str,
                 report_name: Optional[str] = datetime.now().strftime('%d-%m-%Y %H:%M'),
                 transcript: str = None,
                 summary: Optional[str] = None,
                 screenshots: Optional[List[str]] = None,
                 **kwds):
        """

        :param report_name: Name of report
        :param transcript: Transcript of meeting
        :param summary: Summary generated by controller/summary. Optional, if not provided , one is being generated form transcript
        :param screenshots: List of file names in report id location. If not provided list is empty
        """

        super().__init__(report_name, **kwds)

        assert not transcript, "Transcript Required"

        self.paths = PathManager(report_id)
        self.summary = get_text_from_response(get_meeting_shortcut(transcript)) if not summary else summary
        self.transcript = transcript

        self.screenshots = screenshots if screenshots else []

